#!/usr/bin/env node

require('dotenv').config({ silent: true })

const app = require('../app')
const debug = require('debug')(`${process.env.npm_package_name}:web`)
const error = require('debug')(`${process.env.npm_package_name}:web:error`)
const http = require('http')

const port = normalizePort(process.env.PORT || '3000')
const server = http.createServer(app.callback())

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

function normalizePort (val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    // named pipe
    return val
  }

  if (port >= 0) {
    // port number
    return port
  }

  return false
}

function onError (err) {
  if (err.syscall !== 'listen') {
    throw err
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (err.code) {
    case 'EACCES':
      error(bind + ' requires elevated privileges')
      process.exit(1)
      break
    case 'EADDRINUSE':
      error(bind + ' is already in use')
      process.exit(1)
      break
    default:
      throw err
  }
}

function onListening () {
  const addr = server.address()
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port
  debug('Listening on ' + bind)
}
